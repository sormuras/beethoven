group 'de.sormuras'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M2'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'signing'
apply plugin: 'maven'

compileJava {
    options.encoding = 'UTF-8'
    options.fork = true
    // options.forkOptions.jvmArgs << '-showversion'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility  = 1.9
    targetCompatibility  = 1.9
}

javadoc {
    // options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    // options.author = true
    options.header = project.name
    options.addStringOption('Xdoclint:html,syntax,reference', '-quiet')
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            def user = hasProperty('ossrhUsername') ? ossrhUsername : System.getenv('ossrhUsername')
            def pass = hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('ossrhPassword')

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: user, password: pass)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: user, password: pass)
            }

            pom.project {
                name 'beethoven'
                packaging 'jar'
                description 'Java source created with Java'
                url 'https://github.com/sormuras/beethoven'

                scm {
                    connection 'scm:git:git://github.com/sormuras/beethoven.git'
                    developerConnection 'scm:git:ssh://git@github.com/sormuras/beethoven.git'
                    url 'https://github.com/sormuras/beethoven'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'sormuras'
                        name 'Christian Stein'
                        email 'sormuras@gmail.com'
                    }
                }
            }
        }
    }
}

dependencies {
    testCompile('org.junit.jupiter:junit-jupiter-api:5.0.0-M2')
    testCompile('org.junit.platform:junit-platform-launcher:1.0.0-M2')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.0.0-M2')
    testCompile('io.github.lukehutch:fast-classpath-scanner:2.0.3')
}

afterEvaluate {
    def JavaExec junit = (JavaExec) tasks.getByName('junitPlatformTest')

    junit.setEnableAssertions(true)
    junit.systemProperty 'java.util.logging.config.file', 'src/test/resources/logging.properties'

    // junit.args = ['-all']
}

task format(type: JavaExec) {

    def mainJavaFiles = sourceSets.main.allJava.files
    mainJavaFiles.removeIf{ file -> file.name.endsWith('module-info.java') }

    main '-jar'
    args =  ['gradle/google-java-format-1.1-20160923.181825-31-all-deps.jar']
    args += ['--replace']
    args += mainJavaFiles // sourceSets.main.allJava.files
    args += sourceSets.test.allJava.files
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

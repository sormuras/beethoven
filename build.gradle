import java.text.SimpleDateFormat

plugins {
    id 'com.diffplug.gradle.spotless' version '2.4.0'
    id 'java'
    id 'signing'
    id 'maven'
}

spotless {
    java {
        googleJavaFormat("${googleFormatVersion}")
        licenseHeaderFile 'gradle/spotless.license.java'
    }
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    testCompile group: 'org.junit.jupiter',  name: 'junit-jupiter-api',      version: "${junitJupiterVersion}"
    testRuntime group: 'org.junit.jupiter',  name: 'junit-jupiter-engine',   version: "${junitJupiterVersion}"
    testRuntime group: 'org.junit.platform', name: 'junit-platform-console', version: "${junitPlatformVersion}"
}

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

compileJava {
    options.encoding = 'UTF-8'
    options.fork = true
    options.forkOptions.jvmArgs << '-showversion'
}

tasks.withType(JavaCompile) {
    sourceCompatibility  = project.sourceCompatibility
    targetCompatibility  = project.targetCompatibility
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

task runJupiter(type: JavaExec) {

    jvmArgs '-ea'
    jvmArgs '-Djava.util.logging.config.file=src/test/logging.properties'

    classpath = project.sourceSets.test.runtimeClasspath

    main 'org.junit.platform.console.ConsoleLauncher'
    args '--scan-class-path'
    args '--hide-details'
    args "--reports-dir=$project.testReportDir"
}

test.dependsOn runJupiter

jar {
    manifest {
        attributes(
                'Main-Class': 'de.sormuras.beethoven.Beethoven',
                'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
                'Build-Date': buildDate,
                'Build-Time': buildTime,
                'Specification-Title': project.name,
                'Specification-Version': '1.0',
                'Specification-Vendor': 'sormuras.de',
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'sormuras.de'
        )
    }
}

javadoc {
    options.header = project.name
    options.addStringOption('Xdoclint:html,syntax,reference', '-quiet')
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            def user = project.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv('ossrhUsername')
            def pass = project.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('ossrhPassword')

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: user, password: pass)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: user, password: pass)
            }

            pom.project {
                name 'beethoven'
                packaging 'jar'
                description 'Java source created with Java'
                url 'https://github.com/sormuras/beethoven'

                scm {
                    connection 'scm:git:git://github.com/sormuras/beethoven.git'
                    developerConnection 'scm:git:ssh://git@github.com/sormuras/beethoven.git'
                    url 'https://github.com/sormuras/beethoven'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'sormuras'
                        name 'Christian Stein'
                        email 'sormuras@gmail.com'
                    }
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

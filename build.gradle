group 'com.github.sormuras'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M2'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'

compileJava {
    options.encoding = 'UTF-8'
    options.fork = true
    // options.forkOptions.jvmArgs << '-showversion'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility  = 1.9
    targetCompatibility  = 1.9
}

jar {
    from sourceSets.main.allJava.files
}

dependencies {
    testCompile('org.junit.jupiter:junit-jupiter-api:5.0.0-M2')
    testCompile('org.junit.platform:junit-platform-launcher:1.0.0-M2')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.0.0-M2')
    testCompile('io.github.lukehutch:fast-classpath-scanner:2.0.3')
}

afterEvaluate {
    def JavaExec junit = (JavaExec) tasks.getByName('junitPlatformTest')

    junit.setEnableAssertions(true)
    junit.systemProperty 'java.util.logging.config.file', 'src/test/resources/logging.properties'

    junit.args = ['-all']
}

task format(type: JavaExec) {

    def mainJavaFiles = sourceSets.main.allJava.files
    mainJavaFiles.removeIf{ file -> file.name.endsWith('module-info.java') }

    main '-jar'
    args =  ['gradle/google-java-format-1.1-20160811.184829-28-all-deps.jar']
    args += ['--replace']
    args += mainJavaFiles // sourceSets.main.allJava.files
    args += sourceSets.test.allJava.files
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}
